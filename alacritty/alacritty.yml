# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: alacritty

window:
  # Window dimensions (changes require restart)
  #
  # Number of lines/columns (not pixels) in the terminal. The number of columns
  # must be at least `2`, while using a value of `0` for columns and lines will
  # fall back to the window manager's recommended size.
  dimensions:
   columns: 0
   lines: 0

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  position:
    x: 0
    y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 8
    y: 8

  # Spread additional padding evenly around the terminal content.
  #dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background and no title bar buttons
  decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Windowed

  # Window title
  title: Alacritty

  # Allow terminal applications to change Alacritty's window title.
  dynamic_title: true

  # Window class (Linux/BSD only):
  class:
    # Application instance name
    instance: Alacritty
    # General application class
    general: Alacritty

  # GTK theme variant (Linux/BSD only)
  #
  # Override the variant of the GTK theme. Commonly supported values are `dark`
  # and `light`. Set this to `None` to use the default theme variant.
  gtk_theme_variant: None

  opacity: 1

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 100000

  # Scrolling distance multiplier.
  multiplier: 3

# https://github.com/alacritty/alacritty/wiki/Color-schemes

# Colors (Gruvbox dark)
colors:
  primary:
    # hard contrast background - '#1d2021'
    background:        &gruvbox_dark_bg '#050505'
    # background:        &gruvbox_dark_bg '#101010'
    # background:        &gruvbox_dark_bg '#282828'
    # soft contrast background - '#32302f'
    foreground:        '#ebdbb2'
    # foreground:        '#fcecc3'
    bright_foreground: '#fbf1c7'
    dim_foreground:    '#a89984'
  cursor:
    text:   CellBackground
    cursor: CellForeground
  vi_mode_cursor:
    text:   CellBackground
    cursor: CellForeground
  search:
   matches:
    foreground: '#fcecc3'
    background: '#003399'
   focused_match:
    foreground: '#cfcfcf'
    background: '#cc241d'
   colors.footer_bar:
    background: '#1d1f21'
    foreground: '#fcecc3'
  # line_indicator:
  #   foreground: None
  #   background: None
  selection:
    text:       CellBackground
    background: CellForeground
  bright:
    black:   '#928374'
    red:     '#fb4934'
    green:   '#b8bb26'
    yellow:  '#fabd2f'
    blue:    '#83a598'
    magenta: '#d3869b'
    cyan:    '#8ec07c'
    white:   '#ebdbb2'
  normal:
    black:   *gruvbox_dark_bg
    red:     '#cc241d'
    green:   '#98971a'
    yellow:  '#d79921'
    blue:    '#458588'
    magenta: '#b16286'
    cyan:    '#689d6a'
    white:   '#a89984'
  dim:
    black:   '#32302f'
    red:     '#9d0006'
    green:   '#79740e'
    yellow:  '#b57614'
    blue:    '#076678'
    magenta: '#8f3f71'
    cyan:    '#427b58'
    white:   '#928374'
  indexed_colors:
    - { index:  66, color: '#458588' }
    - { index:  72, color: '#689d6a' }
    - { index: 106, color: '#98971a' }
    - { index: 108, color: '#8ec07c' }
    - { index: 109, color: '#83a598' }
    - { index: 124, color: '#cc241d' }
    - { index: 132, color: '#b16286' }
    - { index: 142, color: '#b8bb26' }
    - { index: 166, color: '#d65d0e' }
    - { index: 167, color: '#fb4934' }
    - { index: 172, color: '#d79921' }
    - { index: 175, color: '#d3869b' }
    - { index: 208, color: '#fe8019' }
    - { index: 214, color: '#fabd2f' }
    - { index: 223, color: '#ebdbb2' }
    - { index: 229, color: '#fbf1c7' }
    - { index: 234, color: '#1d2021' }
    - { index: 235, color: '#282828' }
    - { index: 236, color: '#32302f' }
    - { index: 237, color: '#3c3836' }
    - { index: 239, color: '#504945' }
    - { index: 241, color: '#665c54' }
    - { index: 243, color: '#7c6f64' }
    - { index: 245, color: '#928374' }
    - { index: 246, color: '#a89984' }
    - { index: 248, color: '#bdae93' }
    - { index: 250, color: '#d5c4a1' }

live_config_reload: true

# Font configuration
font:
  # Normal (roman) font face
  normal:
    family: monospace

    # The `style` can be specified to pick a specific face.
    style: Regular

  # Bold font face
  bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.
    family: monospace

    # The `style` can be specified to pick a specific face.
    style: Bold

  # Italic font face
  italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    family: monospace

    # The `style` can be specified to pick a specific face.
    style: Italic

  # Bold italic font face
  bold_italic:
    # Font family
    #
    # If the bold italic family is not specified, it will fall back to the
    # value specified for the normal font.
    family: monospace

    # The `style` can be specified to pick a specific face.
    style: Bold Italic

  # Point size
  size: 7

  # Offset is the extra space around each character. `offset.y` can be thought
  # of as modifying the line spacing, and `offset.x` as modifying the letter
  # spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the
  # right, increasing `y` moves the glyph upward.
  glyph_offset:
    x: 0
    y: 0

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

cursor:
  # Cursor style
  style:
    # Cursor shape
    #
    # Values for `shape`:
    #   - â–‡ Block
    #   - _ Underline
    #   - | Beam
    shape: Block

    # Cursor blinking state
    #
    # Values for `blinking`:
    #   - Never: Prevent the cursor from ever blinking
    #   - Off: Disable blinking by default
    #   - On: Enable blinking by default
    #   - Always: Force the cursor to always blink
    blinking: Off

  # Vi mode cursor style
  #
  # If the vi mode cursor style is `None` or not specified, it will fall back to
  # the style of the active value of the normal cursor.
  #
  # See `cursor.style` for available options.
  vi_mode_style: Block

  # Cursor blinking interval in milliseconds.
  blink_interval: 750

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

  # Thickness of the cursor relative to the cell width as floating point number
  # from `0.0` to `1.0`.
  thickness: 0.15

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty
# captures the mouse, the `Shift` modifier is automatically added as a
# requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
mouse_bindings:
 - { mouse: Middle, action: Copy }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
key_bindings:
    # - { key: Return, mods: Control|Shift, action: SpawnNewInstance }
    - { key: Return, mods: Alt, action: SpawnNewInstance }
    # - { key: C, mods: Control|Shift, action: Copy }
    - { key: C, mods: Alt, action: Copy }
    # - { key: V, mods: Control|Shift, action: Paste }
    - { key: V, mods: Alt, action: Paste }
    - { key: D, mods: Alt, action: ScrollPageDown }
    - { key: U, mods: Alt, action: ScrollPageUp,  }
    - { key: G, mods: Alt, action: ScrollToTop,   }
    - { key: G, mods: Alt|Shift, action: ScrollToBottom }
    - { key: J, mods: Alt, action: ScrollLineDown }
    - { key: K, mods: Alt, action: ScrollLineUp }
    # - { key: F, mods: Control|Shift, mode: ~Search, action: SearchForward }
    # - { key: B, mods: Control, mode: ~Search, action: SearchBackward }
    - { key: K, mods: Alt|Shift, action: IncreaseFontSize }
    - { key: J, mods: Alt|Shift, action: DecreaseFontSize }
    # - { key: Equals,         mods: Control,                         action: IncreaseFontSize }
    # - { key: Plus,           mods: Control,                         action: IncreaseFontSize }
    # - { key: NumpadAdd,      mods: Control,                         action: IncreaseFontSize }
    # - { key: Minus,          mods: Control,                         action: DecreaseFontSize }
    # - { key: NumpadSubtract, mods: Control,                         action: DecreaseFontSize }

    # Vi Mode
    #- { key: Space,  mods: Shift|Control, mode: Vi|~Search, action: ScrollToBottom           }
    - { key: Space,  mods: Alt,             mode: ~Search,    action: ToggleViMode            }
    # - { key: Escape,                      mode: Vi|~Search, action: ClearSelection          }
    - { key: I,                             mode: Vi|~Search, action: ToggleViMode            }
    - { key: Q,                             mode: Vi|~Search, action: ToggleViMode            }
    # - { key: C,      mods: Control,       mode: Vi|~Search, action: ToggleViMode            }
    # - { key: Y,      mods: Control,       mode: Vi|~Search, action: ScrollLineUp            }
    # - { key: E,      mods: Control,       mode: Vi|~Search, action: ScrollLineDown          }
    # - { key: G,                           mode: Vi|~Search, action: ScrollToTop             }
    # - { key: G,      mods: Shift,         mode: Vi|~Search, action: ScrollToBottom          }
    # - { key: B,      mods: Control,       mode: Vi|~Search, action: ScrollPageUp            }
    # - { key: F,      mods: Control,       mode: Vi|~Search, action: ScrollPageDown          }
    # - { key: U,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageUp        }
    # - { key: D,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageDown      }
    # - { key: Y,                           mode: Vi|~Search, action: Copy                    }
    # - { key: Y,                           mode: Vi|~Search, action: ClearSelection          }
    # - { key: Copy,                        mode: Vi|~Search, action: ClearSelection          }
    # - { key: V,                           mode: Vi|~Search, action: ToggleNormalSelection   }
    # - { key: V,      mods: Shift,         mode: Vi|~Search, action: ToggleLineSelection     }
    # - { key: V,      mods: Control,       mode: Vi|~Search, action: ToggleBlockSelection    }
    # - { key: V,      mods: Alt,           mode: Vi|~Search, action: ToggleSemanticSelection }
    # - { key: Return,                      mode: Vi|~Search, action: Open                    }
    # - { key: K,                           mode: Vi|~Search, action: Up                      }
    # - { key: J,                           mode: Vi|~Search, action: Down                    }
    # - { key: H,                           mode: Vi|~Search, action: Left                    }
    # - { key: L,                           mode: Vi|~Search, action: Right                   }
    # - { key: Up,                          mode: Vi|~Search, action: Up                      }
    # - { key: Down,                        mode: Vi|~Search, action: Down                    }
    # - { key: Left,                        mode: Vi|~Search, action: Left                    }
    # - { key: Right,                       mode: Vi|~Search, action: Right                   }
    # - { key: Key0,                        mode: Vi|~Search, action: First                   }
    # - { key: Key4,   mods: Shift,         mode: Vi|~Search, action: Last                    }
    # - { key: Key6,   mods: Shift,         mode: Vi|~Search, action: FirstOccupied           }
    # - { key: H,      mods: Shift,         mode: Vi|~Search, action: High                    }
    # - { key: M,      mods: Shift,         mode: Vi|~Search, action: Middle                  }
    # - { key: L,      mods: Shift,         mode: Vi|~Search, action: Low                     }
    # - { key: B,                           mode: Vi|~Search, action: SemanticLeft            }
    # - { key: W,                           mode: Vi|~Search, action: SemanticRight           }
    # - { key: E,                           mode: Vi|~Search, action: SemanticRightEnd        }
    # - { key: B,      mods: Shift,         mode: Vi|~Search, action: WordLeft                }
    # - { key: W,      mods: Shift,         mode: Vi|~Search, action: WordRight               }
    # - { key: E,      mods: Shift,         mode: Vi|~Search, action: WordRightEnd            }
    # - { key: Key5,   mods: Shift,         mode: Vi|~Search, action: Bracket                 }
    # - { key: Slash,                       mode: Vi|~Search, action: SearchForward           }
    # - { key: Slash,  mods: Shift,         mode: Vi|~Search, action: SearchBackward          }
    # - { key: N,                           mode: Vi|~Search, action: SearchNext              }
    # - { key: N,      mods: Shift,         mode: Vi|~Search, action: SearchPrevious          }

    # Search Mode
    # - { key: Return,                mode: Search|Vi,  action: SearchConfirm         }
    # - { key: Escape,                mode: Search,     action: SearchCancel          }
    # - { key: C,      mods: Control, mode: Search,     action: SearchCancel          }
    # - { key: U,      mods: Control, mode: Search,     action: SearchClear           }
    # - { key: W,      mods: Control, mode: Search,     action: SearchDeleteWord      }
    # - { key: P,      mods: Control, mode: Search,     action: SearchHistoryPrevious }
    # - { key: N,      mods: Control, mode: Search,     action: SearchHistoryNext     }
    # - { key: Up,                    mode: Search,     action: SearchHistoryPrevious }
    # - { key: Down,                  mode: Search,     action: SearchHistoryNext     }
    # - { key: Return,                mode: Search|~Vi, action: SearchFocusNext       }
    # - { key: Return, mods: Shift,   mode: Search|~Vi, action: SearchFocusPrevious   }

debug:
  # Display the time it takes to redraw each frame.
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - Off
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Warn

  # Print all received window events.
  print_events: false
